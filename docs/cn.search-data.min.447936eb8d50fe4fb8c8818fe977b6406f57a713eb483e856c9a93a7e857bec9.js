'use strict';(function(){const indexCfg={encode:false,tokenize:function(str){return str.replace(/[\x00-\x7F]/g,'').split('');}};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/yan-tutorial/docs/foundation/','title':"Foundation",'content':""});index.add({'id':1,'href':'/yan-tutorial/docs/foundation/tutorial/','title':"Tutorial",'content':"教程 "});index.add({'id':2,'href':'/yan-tutorial/docs/foundation/tutorial/customize/','title':"框架定制",'content':"框架定制 "});index.add({'id':3,'href':'/yan-tutorial/docs/foundation/api/compiler/lexer/','title':"词法分析",'content':"Caput vino delphine in tamen vias Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter , per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum .\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\n Phrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\n Limitibus misere sit Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"});index.add({'id':4,'href':'/yan-tutorial/docs/foundation/api/compiler/parser/','title':"语法分析",'content':"At me ipso nepotibus nunc celebratior genus Tanto oblite Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\n Remansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit  Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\n Baculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra  Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt . Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"});index.add({'id':5,'href':'/yan-tutorial/docs/foundation/api/compiler/','title':"编译器",'content':""});index.add({'id':6,'href':'/yan-tutorial/docs/foundation/api/','title':"API",'content':"API文档 "});index.add({'id':7,'href':'/yan-tutorial/docs/foundation/api/interpreter/','title':"解释器",'content':"2nd Level of Menu Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter , per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum .\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  "});index.add({'id':8,'href':'/yan-tutorial/docs/common/','title':"Common",'content':""});index.add({'id':9,'href':'/yan-tutorial/docs/common/error/','title':"Error",'content':"Buttons Buttons are styled links that can lead to local page or external link.\n{{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Example  Get Home  Contribute  "});index.add({'id':10,'href':'/yan-tutorial/docs/common/ycc/','title':"Ycc",'content':"test "});index.add({'id':11,'href':'/yan-tutorial/docs/','title':"Docs",'content':""});index.add({'id':12,'href':'/yan-tutorial/docs/foundation/tutorial/quick-start/','title':"快速开始",'content':"快速开始 假设我们有一个语言Simple，这个语言只能定义变量，定义变量的规则是先写一个var关键字，然后空格接一个标识符，标识符只能有字母和数字组成，然后可以有一个初始值number，初始值必须是个整数。无需声明类型。\n\u0026#39;var\u0026#39; ID \u0026#39;=\u0026#39; number 现在我们利用Foundation框架，为这个语言编写一个简单的词法分析器和语法分析器。 Let\u0026rsquo;s Start!\n新建一个项目 下面详细阐述如何将框架导入你的Java项目之中，如果你之前有过使用Java第三方库的经历，你可以选择跳过这一章节，从 下载安装 页面直接下载jar包自行导入。\n \u0008Yan-Foundation Jar导入教程 展开  推荐使用Intellij Idea作为开发环境，当然你也可以使用Eclipse，本文以Idea为例。\n 打开Idea，新建一个Java项目，选择Java SDK。  Foundation框架使用Java11构建，因此你需要使用Java11或更高版本。当前Oracle发布的最新版本是Java13，如果你的版本低于11，你可以前往Oracle官网下载最新版本的Java SDK。  一直点Next直到创建好项目，你将会得到类似下图的项目结构。如果你勾选了Create Project from Template，你将会和我一样获得一个Main文件。如果没有，你可以自己创建一个。\n导入Foundation依赖   对Java不熟悉的同学，可以把这一步想成C++/C的include，或者是Python的pip install。\n 在这里，我们使用jar包(点击下载)的形式导入foundation框架。依照下图步骤操作，在第四步后会弹出一个文件选择界面，选择刚刚下载的jar包，然后一直点击OK即可。\n   最开始的开始 创建一个可以执行的解释器还有命令行程序需要多少行代码？100？1000？  使用foundation框架，你只需要在你的main函数中添加如下两行代码即可。\npackage yan.demo.simple; import yan.foundation.Language; import yan.foundation.Launcher; public class Main { public static void main(String[] args) { Language language = new Language(); Launcher.launch(language, args); } } 解释器 如果你使用Idea，点击main函数旁边的绿色三角形即可启动程序。启动之后，你将看到类似下图所示的一个交互式解释器。\n 你可以在这里输入代码，或者一些内建指令。内建指令以冒号:开头，对于其他不以冒号开头的字符串，解释器将其视为代码，当你按下回车时，解释器为调用你编写的Phase(如词法分析器)等对代码进行分析，并把结果显示出来（图中展示的例子没有显示任何东西，因为你还没有为你的语言编写Phase！）。\n 最常用的内建指令是:help，你可以通过这个指令获取解释器支持哪些内建指令。 怎么添加Phase(词法分析器/语法分析器)？后面会讲。   命令行程序 事实上，在获得一个交互式解释器的同时，你还获得了一个Simple语言的命令行程序，你可以像下面这样在命令行中指定输入文件，输出文件，其他参数等，就像使用Python或者GCC一样。\n// 你需要将程序打包成simple.jar java -jar simple.jar input.simple -o out.txt 如果你输入java -jar simple.jar --help，你还会看到如下的帮助信息。\nUsage: \u0026lt;main class\u0026gt; [-hV] [-o=\u0026lt;outputFile\u0026gt;] [-t=\u0026lt;target\u0026gt;] \u0026lt;inputFile\u0026gt; \u0026lt;inputFile\u0026gt; The file to be processed. -h, --help Show this help message and exit. -o, --output=\u0026lt;outputFile\u0026gt; Output file for result -t, --target=\u0026lt;target\u0026gt; The stage you want to compile to. Valid values: . Default: null -V, --version Print version information and exit. 细心的同学可能会注意到, 这里有一个参数target, 这个参数实际上指定的是你编写的编译器要编译到哪个阶段。因为你还没有为编译器编写任何一个阶段，所以现在它的Valid values和default都是空或者null。\n当你编写好词法分析器和语法分析器时，valid value就会变成类似lex, parse之类的，到时候你就可以使用命令行参数进行指定，获取中间结果。\n类似的，使用我们的框架，这些功能都是免费送的，你几乎不需要编写任何代码。\n 一些概念 在正式开始编写词法分析器之前，我们先了解一个概念Phase。\nPhase\n相信在编译原理的前几节课，老师们都会跟你们讲编译器的组成，通常来说，编译器由5或6个阶段构成，例如词法分析器，语法分析器，语义分析器，中间代码生成，代码优化和目标代码生成。\n事实上，当我们把这些过程抽象出来，我们会发现，每个过程其实就是将程序的一种表示转换成另一种。在我们的foundation框架中，这个过程被定义为一个Phase。例如，词法分析器Phase\u0026lt;String, List\u0026lt;Token\u0026gt;\u0026gt;就是从string到一个token列表，语法分析器Phase\u0026lt;List\u0026lt;Token\u0026gt;, Tree.TopLevel\u0026gt;就是从Token列表转换成一棵抽象语法树。\n在我们的框架中，创建Phase和添加Phase都十分简单，请接着往下看。\n词法分析器 现在我们来为了我们的Simple语言编写一个词法分析器（Lexer Phase）。\n 首先新建一个文件Lexer.java，修改里面的内容成如下所示。    AbstractLexer 是foundation框架中提供的一个Lexer模版，该类继承自Phase\u0026lt;String, List\u0026lt;Token\u0026gt;\u0026gt;，\u0008并\u0008提供许多你在词法分析中\u0008可以使用的实用函数（Helper Function）。对于该类你只需要实现nextToken函数。\n   Token 是foundation框架中定义的单词(Token)的数据结构。\n    import yan.foundation.compiler.frontend.lex.AbstractLexer; import yan.foundation.compiler.frontend.lex.Token; public class Lexer extends AbstractLexer { @Override public Token nextToken() { return null; } }  在Main.java中添加我们刚刚编写的词法分析器。\n 向你的语言中添加一个词法分析器特别简单，只需要调用语言对象.addPhase()即可。 addPhase()包含两个参数：  第一个参数接受一个Phase\u0026lt;In, Out\u0026gt;即一个编译阶段。（这就是为什么AbstractLexer需要继承自Phase\u0026lt;String, List\u0026lt;Token\u0026gt;\u0026gt;。 第二个参数是一个字符串target，这个字符串会作为命令行选项--target的可选值。      public static void main(String[] args) throws Exception { // addPhase可能会抛出异常  Language language = new Language(); language.addPhase(new Lexer(), \u0026#34;lex\u0026#34;); // 新增  Launcher.launch(language, args); } 虽然我们还没有真正的编写分析逻辑，不过没关系，现在你可以点击三角箭头，运行看看吧。\n语法分析器 test\n"});})();